from asyncio.windows_events import NULL
from aiogram import *
#from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import sqlite3

bot = Bot(token="5137903807:AAEtrp9rSqXKStp93h2_Q_OhNfey1QUJXoo")
dp = Dispatcher(bot)

@dp.message_handler(commands='start')
async def start(message: types.message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚úç–î–æ–±–∞–≤–∏—Ç—å', 'üí™–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á','üëÄ–ü–æ–º–æ—â—å')
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.username}üôå!\n–Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–∞—Ä—å ^))")
    await message.answer("–ß–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=keyboard)


@dp.message_handler(Text(equals='‚úç–î–æ–±–∞–≤–∏—Ç—å'))
async def about_problem(message: types.message):
    await message.answer('–í–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –¥–µ–ª–æ –∏ —è –µ–≥–æ –≤–∞–º –Ω–∞–ø–æ–º–Ω—é!')
    await message.answer('–®–∞–±–ª–æ–Ω - –≥–¥–µ? —á—Ç–æ? –∫–æ–≥–¥–∞? –≤—Ä–µ–º—è?\n–ü—Ä–∏–º–µ—Ä - –ö–≤–∞–Ω—Ç–æ—Ä–∏—É–º –≤–µ–±–∏–Ω–∞—Ä –∑–∞–≤—Ç—Ä–∞ –≤ 12:00')
    
    
@dp.message_handler(Text(equals='üí™–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á'))
async def get_allproblem(message: types.message):
    conn = sqlite3.connect('data.db')
    cur = conn.cursor()
    cur.execute(f"SELECT * FROM problem WHERE user_id = {message.from_user.id}")
    problems = cur.fetchall()
    if len(problems)==0:
        await message.answer('–£ –≤–∞—Å –¥–µ–ª –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –ù–∞–ø–æ–º–Ω–∏—Ç—å')
    else:
        for i,pr in enumerate(problems):
            key = types.InlineKeyboardButton(' ‚úÖ–ó–∞–≤–µ—Ä—à–µ–Ω–æ', callback_data=pr[1])
            key1 = types.InlineKeyboardButton('time', callback_data='time')
            inline_kb_full = types.InlineKeyboardMarkup(row_width=1).add(key)
            await message.answer(f"–î–µ–ª–æ #{i+1} - {pr[1]}", reply_markup=inline_kb_full)

@dp.message_handler(Text(equals='üëÄ–ü–æ–º–æ—â—å'))
async def get_help(message: types.message):
    await message.answer('–Ø –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, —á—Ç–æ —Ç—ã –æ—Ç –º–µ–Ω—è —Ö–æ—á–µ—à—å????')


@dp.callback_query_handler()
async def process_callback(callback_data: types.CallbackQuery):
    conn = sqlite3.connect('data.db')
    cur = conn.cursor()
    cur.execute(f"DELETE FROM problem WHERE problem='{callback_data.data}'")
    conn.commit()
    await bot.send_message(callback_data.from_user.id,'–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    
@dp.message_handler()
async def set_problem(message:types.message):
    conn = sqlite3.connect('data.db')
    cur = conn.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS problem(id INTEGER PRIMARY KEY, problem TEXT, user_id INTENGER)')
    cur.execute(f'INSERT INTO problem VALUES(NULL,"{message.text}", "{message.from_user.id}")')
    conn.commit()
    await message.answer('–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á')


def main():
    executor.start_polling(dp)

if __name__ == '__main__':
    main()